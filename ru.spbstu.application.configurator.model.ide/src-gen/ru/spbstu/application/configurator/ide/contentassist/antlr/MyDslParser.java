/*
 * generated by Xtext 2.14.0
 */
package ru.spbstu.application.configurator.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import ru.spbstu.application.configurator.ide.contentassist.antlr.internal.InternalMyDslParser;
import ru.spbstu.application.configurator.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
			builder.put(grammarAccess.getFeatureNameAccess().getGroup(), "rule__FeatureName__Group__0");
			builder.put(grammarAccess.getApplicationAccess().getGroup(), "rule__Application__Group__0");
			builder.put(grammarAccess.getTenantAccess().getGroup(), "rule__Tenant__Group__0");
			builder.put(grammarAccess.getHoldAccess().getGroup(), "rule__Hold__Group__0");
			builder.put(grammarAccess.getArchiveTipeAccess().getGroup(), "rule__ArchiveTipe__Group__0");
			builder.put(grammarAccess.getCategoryAccess().getGroup(), "rule__Category__Group__0");
			builder.put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
			builder.put(grammarAccess.getMCSAccess().getGroup(), "rule__MCS__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getHoldTypeAccess().getGroup(), "rule__HoldType__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementAssignment_0(), "rule__Model__ElementAssignment_0");
			builder.put(grammarAccess.getModelAccess().getElementAssignment_1(), "rule__Model__ElementAssignment_1");
			builder.put(grammarAccess.getModelAccess().getElementAssignment_2(), "rule__Model__ElementAssignment_2");
			builder.put(grammarAccess.getModelAccess().getElementAssignment_3(), "rule__Model__ElementAssignment_3");
			builder.put(grammarAccess.getVersionAccess().getNameAssignment_1(), "rule__Version__NameAssignment_1");
			builder.put(grammarAccess.getFeatureNameAccess().getNameAssignment_1(), "rule__FeatureName__NameAssignment_1");
			builder.put(grammarAccess.getApplicationAccess().getFeatures1Assignment_1(), "rule__Application__Features1Assignment_1");
			builder.put(grammarAccess.getApplicationAccess().getFeaturesAssignment_2(), "rule__Application__FeaturesAssignment_2");
			builder.put(grammarAccess.getApplicationAccess().getFeatureAssignment_3(), "rule__Application__FeatureAssignment_3");
			builder.put(grammarAccess.getApplicationAccess().getFeatureAssignment_4(), "rule__Application__FeatureAssignment_4");
			builder.put(grammarAccess.getApplicationAccess().getFeatureAssignment_5(), "rule__Application__FeatureAssignment_5");
			builder.put(grammarAccess.getApplicationAccess().getFeatureAssignment_6(), "rule__Application__FeatureAssignment_6");
			builder.put(grammarAccess.getTenantAccess().getFeatures1Assignment_1(), "rule__Tenant__Features1Assignment_1");
			builder.put(grammarAccess.getHoldAccess().getFeatures1Assignment_1(), "rule__Hold__Features1Assignment_1");
			builder.put(grammarAccess.getHoldAccess().getFeaturesAssignment_2(), "rule__Hold__FeaturesAssignment_2");
			builder.put(grammarAccess.getArchiveTipeAccess().getNameAssignment_1(), "rule__ArchiveTipe__NameAssignment_1");
			builder.put(grammarAccess.getCategoryAccess().getNameAssignment_1(), "rule__Category__NameAssignment_1");
			builder.put(grammarAccess.getDescriptionAccess().getNameAssignment_1(), "rule__Description__NameAssignment_1");
			builder.put(grammarAccess.getMCSAccess().getNameAssignment_1(), "rule__MCS__NameAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
			builder.put(grammarAccess.getHoldTypeAccess().getFeaturesAssignment_1(), "rule__HoldType__FeaturesAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
