/*
 * generated by Xtext 2.14.0
 */
grammar InternalInfoProject;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ru.spbstu.application.configurator.model.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ru.spbstu.application.configurator.model.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ru.spbstu.application.configurator.model.services.InfoProjectGrammarAccess;

}
@parser::members {
	private InfoProjectGrammarAccess grammarAccess;

	public void setGrammarAccess(InfoProjectGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVersion
entryRuleVersion
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVersionAccess().getGroup()); }
		(rule__Version__Group__0)
		{ after(grammarAccess.getVersionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureName
entryRuleFeatureName
:
{ before(grammarAccess.getFeatureNameRule()); }
	 ruleFeatureName
{ after(grammarAccess.getFeatureNameRule()); } 
	 EOF 
;

// Rule FeatureName
ruleFeatureName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureNameAccess().getGroup()); }
		(rule__FeatureName__Group__0)
		{ after(grammarAccess.getFeatureNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleApplication
entryRuleApplication
:
{ before(grammarAccess.getApplicationRule()); }
	 ruleApplication
{ after(grammarAccess.getApplicationRule()); } 
	 EOF 
;

// Rule Application
ruleApplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getApplicationAccess().getGroup()); }
		(rule__Application__Group__0)
		{ after(grammarAccess.getApplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTenant
entryRuleTenant
:
{ before(grammarAccess.getTenantRule()); }
	 ruleTenant
{ after(grammarAccess.getTenantRule()); } 
	 EOF 
;

// Rule Tenant
ruleTenant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTenantAccess().getGroup()); }
		(rule__Tenant__Group__0)
		{ after(grammarAccess.getTenantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHold
entryRuleHold
:
{ before(grammarAccess.getHoldRule()); }
	 ruleHold
{ after(grammarAccess.getHoldRule()); } 
	 EOF 
;

// Rule Hold
ruleHold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHoldAccess().getGroup()); }
		(rule__Hold__Group__0)
		{ after(grammarAccess.getHoldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArchiveType
entryRuleArchiveType
:
{ before(grammarAccess.getArchiveTypeRule()); }
	 ruleArchiveType
{ after(grammarAccess.getArchiveTypeRule()); } 
	 EOF 
;

// Rule ArchiveType
ruleArchiveType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArchiveTypeAccess().getGroup()); }
		(rule__ArchiveType__Group__0)
		{ after(grammarAccess.getArchiveTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCategory
entryRuleCategory
:
{ before(grammarAccess.getCategoryRule()); }
	 ruleCategory
{ after(grammarAccess.getCategoryRule()); } 
	 EOF 
;

// Rule Category
ruleCategory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCategoryAccess().getGroup()); }
		(rule__Category__Group__0)
		{ after(grammarAccess.getCategoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDescription
entryRuleDescription
:
{ before(grammarAccess.getDescriptionRule()); }
	 ruleDescription
{ after(grammarAccess.getDescriptionRule()); } 
	 EOF 
;

// Rule Description
ruleDescription 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDescriptionAccess().getGroup()); }
		(rule__Description__Group__0)
		{ after(grammarAccess.getDescriptionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMCS
entryRuleMCS
:
{ before(grammarAccess.getMCSRule()); }
	 ruleMCS
{ after(grammarAccess.getMCSRule()); } 
	 EOF 
;

// Rule MCS
ruleMCS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMCSAccess().getGroup()); }
		(rule__MCS__Group__0)
		{ after(grammarAccess.getMCSAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getGroup()); }
		(rule__Type__Group__0)
		{ after(grammarAccess.getTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHoldType
entryRuleHoldType
:
{ before(grammarAccess.getHoldTypeRule()); }
	 ruleHoldType
{ after(grammarAccess.getHoldTypeRule()); } 
	 EOF 
;

// Rule HoldType
ruleHoldType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHoldTypeAccess().getGroup()); }
		(rule__HoldType__Group__0)
		{ after(grammarAccess.getHoldTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule enumOfArchiveType
ruleenumOfArchiveType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumOfArchiveTypeAccess().getAlternatives()); }
		(rule__EnumOfArchiveType__Alternatives)
		{ after(grammarAccess.getEnumOfArchiveTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule enumOfTypes
ruleenumOfTypes
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumOfTypesAccess().getAlternatives()); }
		(rule__EnumOfTypes__Alternatives)
		{ after(grammarAccess.getEnumOfTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumOfArchiveType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumOfArchiveTypeAccess().getSIPEnumLiteralDeclaration_0()); }
		('sip')
		{ after(grammarAccess.getEnumOfArchiveTypeAccess().getSIPEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnumOfArchiveTypeAccess().getTABLEEnumLiteralDeclaration_1()); }
		('table')
		{ after(grammarAccess.getEnumOfArchiveTypeAccess().getTABLEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumOfTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumOfTypesAccess().getACTIVE_ARCHIVINGEnumLiteralDeclaration_0()); }
		('active archiving')
		{ after(grammarAccess.getEnumOfTypesAccess().getACTIVE_ARCHIVINGEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnumOfTypesAccess().getAPP_DECOMMEnumLiteralDeclaration_1()); }
		('app decomm')
		{ after(grammarAccess.getEnumOfTypesAccess().getAPP_DECOMMEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementAssignment_0()); }
	(rule__Model__ElementAssignment_0)
	{ after(grammarAccess.getModelAccess().getElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementAssignment_1()); }
	(rule__Model__ElementAssignment_1)
	{ after(grammarAccess.getModelAccess().getElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementAssignment_2()); }
	(rule__Model__ElementAssignment_2)
	{ after(grammarAccess.getModelAccess().getElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementAssignment_3()); }
	(rule__Model__ElementAssignment_3)
	{ after(grammarAccess.getModelAccess().getElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getVersionKeyword_0()); }
	'version:'
	{ after(grammarAccess.getVersionAccess().getVersionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getNameAssignment_1()); }
	(rule__Version__NameAssignment_1)
	{ after(grammarAccess.getVersionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureName__Group__0__Impl
	rule__FeatureName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureNameAccess().getNameKeyword_0()); }
	'name: '
	{ after(grammarAccess.getFeatureNameAccess().getNameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureNameAccess().getNameAssignment_1()); }
	(rule__FeatureName__NameAssignment_1)
	{ after(grammarAccess.getFeatureNameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__0__Impl
	rule__Application__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getApplicationKeyword_0()); }
	'application:'
	{ after(grammarAccess.getApplicationAccess().getApplicationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__1__Impl
	rule__Application__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getFeatures1Assignment_1()); }
	(rule__Application__Features1Assignment_1)
	{ after(grammarAccess.getApplicationAccess().getFeatures1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__2__Impl
	rule__Application__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getFeaturesAssignment_2()); }
	(rule__Application__FeaturesAssignment_2)
	{ after(grammarAccess.getApplicationAccess().getFeaturesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__3__Impl
	rule__Application__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getFeatureAssignment_3()); }
	(rule__Application__FeatureAssignment_3)
	{ after(grammarAccess.getApplicationAccess().getFeatureAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__4__Impl
	rule__Application__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getFeatureAssignment_4()); }
	(rule__Application__FeatureAssignment_4)?
	{ after(grammarAccess.getApplicationAccess().getFeatureAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__5__Impl
	rule__Application__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getFeatureAssignment_5()); }
	(rule__Application__FeatureAssignment_5)
	{ after(grammarAccess.getApplicationAccess().getFeatureAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Application__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApplicationAccess().getFeatureAssignment_6()); }
	(rule__Application__FeatureAssignment_6)
	{ after(grammarAccess.getApplicationAccess().getFeatureAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tenant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tenant__Group__0__Impl
	rule__Tenant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tenant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTenantAccess().getTenantKeyword_0()); }
	'tenant:'
	{ after(grammarAccess.getTenantAccess().getTenantKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tenant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tenant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tenant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTenantAccess().getFeatures1Assignment_1()); }
	(rule__Tenant__Features1Assignment_1)
	{ after(grammarAccess.getTenantAccess().getFeatures1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hold__Group__0__Impl
	rule__Hold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHoldAccess().getHoldKeyword_0()); }
	'hold:'
	{ after(grammarAccess.getHoldAccess().getHoldKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hold__Group__1__Impl
	rule__Hold__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHoldAccess().getFeatures1Assignment_1()); }
	(rule__Hold__Features1Assignment_1)
	{ after(grammarAccess.getHoldAccess().getFeatures1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hold__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hold__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hold__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHoldAccess().getFeaturesAssignment_2()); }
	(rule__Hold__FeaturesAssignment_2)
	{ after(grammarAccess.getHoldAccess().getFeaturesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArchiveType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArchiveType__Group__0__Impl
	rule__ArchiveType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArchiveType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchiveTypeAccess().getArchiveTypeKeyword_0()); }
	'archiveType:'
	{ after(grammarAccess.getArchiveTypeAccess().getArchiveTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArchiveType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArchiveType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArchiveType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchiveTypeAccess().getValueAssignment_1()); }
	(rule__ArchiveType__ValueAssignment_1)
	{ after(grammarAccess.getArchiveTypeAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Category__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Category__Group__0__Impl
	rule__Category__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCategoryAccess().getCategoryKeyword_0()); }
	'category:'
	{ after(grammarAccess.getCategoryAccess().getCategoryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Category__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCategoryAccess().getNameAssignment_1()); }
	(rule__Category__NameAssignment_1)
	{ after(grammarAccess.getCategoryAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Description__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Description__Group__0__Impl
	rule__Description__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }
	'description:'
	{ after(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Description__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescriptionAccess().getNameAssignment_1()); }
	(rule__Description__NameAssignment_1)
	{ after(grammarAccess.getDescriptionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MCS__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MCS__Group__0__Impl
	rule__MCS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MCS__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMCSAccess().getMetadataCacheSizeKeyword_0()); }
	'metadataCacheSize:'
	{ after(grammarAccess.getMCSAccess().getMetadataCacheSizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MCS__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MCS__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MCS__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMCSAccess().getNameAssignment_1()); }
	(rule__MCS__NameAssignment_1)
	{ after(grammarAccess.getMCSAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
	'type:'
	{ after(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getValueAssignment_1()); }
	(rule__Type__ValueAssignment_1)
	{ after(grammarAccess.getTypeAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HoldType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HoldType__Group__0__Impl
	rule__HoldType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHoldTypeAccess().getHoldTypeKeyword_0()); }
	'holdType:'
	{ after(grammarAccess.getHoldTypeAccess().getHoldTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HoldType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHoldTypeAccess().getFeaturesAssignment_1()); }
	(rule__HoldType__FeaturesAssignment_1)
	{ after(grammarAccess.getHoldTypeAccess().getFeaturesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementVersionParserRuleCall_0_0()); }
		ruleVersion
		{ after(grammarAccess.getModelAccess().getElementVersionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementApplicationParserRuleCall_1_0()); }
		ruleApplication
		{ after(grammarAccess.getModelAccess().getElementApplicationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementTenantParserRuleCall_2_0()); }
		ruleTenant
		{ after(grammarAccess.getModelAccess().getElementTenantParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementHoldParserRuleCall_3_0()); }
		ruleHold
		{ after(grammarAccess.getModelAccess().getElementHoldParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVersionAccess().getNameVERSION_NUMBERTerminalRuleCall_1_0()); }
		RULE_VERSION_NUMBER
		{ after(grammarAccess.getVersionAccess().getNameVERSION_NUMBERTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureName__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureNameAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFeatureNameAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Features1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApplicationAccess().getFeatures1FeatureNameParserRuleCall_1_0()); }
		ruleFeatureName
		{ after(grammarAccess.getApplicationAccess().getFeatures1FeatureNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__FeaturesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApplicationAccess().getFeaturesArchiveTypeParserRuleCall_2_0()); }
		ruleArchiveType
		{ after(grammarAccess.getApplicationAccess().getFeaturesArchiveTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__FeatureAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApplicationAccess().getFeatureCategoryParserRuleCall_3_0()); }
		ruleCategory
		{ after(grammarAccess.getApplicationAccess().getFeatureCategoryParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__FeatureAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApplicationAccess().getFeatureDescriptionParserRuleCall_4_0()); }
		ruleDescription
		{ after(grammarAccess.getApplicationAccess().getFeatureDescriptionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__FeatureAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApplicationAccess().getFeatureMCSParserRuleCall_5_0()); }
		ruleMCS
		{ after(grammarAccess.getApplicationAccess().getFeatureMCSParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__FeatureAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApplicationAccess().getFeatureTypeParserRuleCall_6_0()); }
		ruleType
		{ after(grammarAccess.getApplicationAccess().getFeatureTypeParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tenant__Features1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTenantAccess().getFeatures1FeatureNameParserRuleCall_1_0()); }
		ruleFeatureName
		{ after(grammarAccess.getTenantAccess().getFeatures1FeatureNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hold__Features1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHoldAccess().getFeatures1FeatureNameParserRuleCall_1_0()); }
		ruleFeatureName
		{ after(grammarAccess.getHoldAccess().getFeatures1FeatureNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hold__FeaturesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHoldAccess().getFeaturesHoldTypeParserRuleCall_2_0()); }
		ruleHoldType
		{ after(grammarAccess.getHoldAccess().getFeaturesHoldTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArchiveType__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchiveTypeAccess().getValueEnumOfArchiveTypeEnumRuleCall_1_0()); }
		ruleenumOfArchiveType
		{ after(grammarAccess.getArchiveTypeAccess().getValueEnumOfArchiveTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescriptionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDescriptionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MCS__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMCSAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMCSAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getValueEnumOfTypesEnumRuleCall_1_0()); }
		ruleenumOfTypes
		{ after(grammarAccess.getTypeAccess().getValueEnumOfTypesEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldType__FeaturesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHoldTypeAccess().getFeaturesTypeParserRuleCall_1_0()); }
		ruleType
		{ after(grammarAccess.getHoldTypeAccess().getFeaturesTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VERSION_NUMBER : '0'..'9' ('.'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
