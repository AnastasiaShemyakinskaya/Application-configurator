/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ru.spbstu.application.configurator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ru.spbstu.application.configurator.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ru.spbstu.application.configurator.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementVersionParserRuleCall_0_0());
				}
				lv_element_0_0=ruleVersion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"element",
						lv_element_0_0,
						"ru.spbstu.application.configurator.MyDsl.Version");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementApplicationParserRuleCall_1_0());
				}
				lv_element_1_0=ruleApplication
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"element",
						lv_element_1_0,
						"ru.spbstu.application.configurator.MyDsl.Application");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementTenantParserRuleCall_2_0());
				}
				lv_element_2_0=ruleTenant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"element",
						lv_element_2_0,
						"ru.spbstu.application.configurator.MyDsl.Tenant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementHoldParserRuleCall_3_0());
				}
				lv_element_3_0=ruleHold
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"element",
						lv_element_3_0,
						"ru.spbstu.application.configurator.MyDsl.Hold");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionRule()); }
	iv_ruleVersion=ruleVersion
	{ $current=$iv_ruleVersion.current; }
	EOF;

// Rule Version
ruleVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='version '
		{
			newLeafNode(otherlv_0, grammarAccess.getVersionAccess().getVersionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID1
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVersionAccess().getNameID1TerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVersionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"ru.spbstu.application.configurator.MyDsl.ID1");
				}
			)
		)
	)
;

// Entry rule entryRuleFeatureName
entryRuleFeatureName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureNameRule()); }
	iv_ruleFeatureName=ruleFeatureName
	{ $current=$iv_ruleFeatureName.current; }
	EOF;

// Rule FeatureName
ruleFeatureName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='name: '
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureNameAccess().getNameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFeatureNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleApplication
entryRuleApplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getApplicationRule()); }
	iv_ruleApplication=ruleApplication
	{ $current=$iv_ruleApplication.current; }
	EOF;

// Rule Application
ruleApplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='application:'
		{
			newLeafNode(otherlv_0, grammarAccess.getApplicationAccess().getApplicationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getApplicationAccess().getFeatures1FeatureNameParserRuleCall_1_0());
				}
				lv_features1_1_0=ruleFeatureName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplicationRule());
					}
					add(
						$current,
						"features1",
						lv_features1_1_0,
						"ru.spbstu.application.configurator.MyDsl.FeatureName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getApplicationAccess().getFeaturesArchiveTipeParserRuleCall_2_0());
				}
				lv_features_2_0=ruleArchiveTipe
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplicationRule());
					}
					add(
						$current,
						"features",
						lv_features_2_0,
						"ru.spbstu.application.configurator.MyDsl.ArchiveTipe");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getApplicationAccess().getFeatureCategoryParserRuleCall_3_0());
				}
				lv_feature_3_0=ruleCategory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplicationRule());
					}
					add(
						$current,
						"feature",
						lv_feature_3_0,
						"ru.spbstu.application.configurator.MyDsl.Category");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getApplicationAccess().getFeatureDescriptionParserRuleCall_4_0());
				}
				lv_feature_4_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplicationRule());
					}
					add(
						$current,
						"feature",
						lv_feature_4_0,
						"ru.spbstu.application.configurator.MyDsl.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getApplicationAccess().getFeatureMCSParserRuleCall_5_0());
				}
				lv_feature_5_0=ruleMCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplicationRule());
					}
					add(
						$current,
						"feature",
						lv_feature_5_0,
						"ru.spbstu.application.configurator.MyDsl.MCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getApplicationAccess().getFeatureTypeParserRuleCall_6_0());
				}
				lv_feature_6_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getApplicationRule());
					}
					add(
						$current,
						"feature",
						lv_feature_6_0,
						"ru.spbstu.application.configurator.MyDsl.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTenant
entryRuleTenant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTenantRule()); }
	iv_ruleTenant=ruleTenant
	{ $current=$iv_ruleTenant.current; }
	EOF;

// Rule Tenant
ruleTenant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='tenant:'
		{
			newLeafNode(otherlv_0, grammarAccess.getTenantAccess().getTenantKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTenantAccess().getFeatures1FeatureNameParserRuleCall_1_0());
				}
				lv_features1_1_0=ruleFeatureName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTenantRule());
					}
					add(
						$current,
						"features1",
						lv_features1_1_0,
						"ru.spbstu.application.configurator.MyDsl.FeatureName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHold
entryRuleHold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHoldRule()); }
	iv_ruleHold=ruleHold
	{ $current=$iv_ruleHold.current; }
	EOF;

// Rule Hold
ruleHold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='hold:'
		{
			newLeafNode(otherlv_0, grammarAccess.getHoldAccess().getHoldKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHoldAccess().getFeatures1FeatureNameParserRuleCall_1_0());
				}
				lv_features1_1_0=ruleFeatureName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHoldRule());
					}
					add(
						$current,
						"features1",
						lv_features1_1_0,
						"ru.spbstu.application.configurator.MyDsl.FeatureName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHoldAccess().getFeaturesHoldTypeParserRuleCall_2_0());
				}
				lv_features_2_0=ruleHoldType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHoldRule());
					}
					add(
						$current,
						"features",
						lv_features_2_0,
						"ru.spbstu.application.configurator.MyDsl.HoldType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArchiveTipe
entryRuleArchiveTipe returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArchiveTipeRule()); }
	iv_ruleArchiveTipe=ruleArchiveTipe
	{ $current=$iv_ruleArchiveTipe.current; }
	EOF;

// Rule ArchiveTipe
ruleArchiveTipe returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='archiveType: '
		{
			newLeafNode(otherlv_0, grammarAccess.getArchiveTipeAccess().getArchiveTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getArchiveTipeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArchiveTipeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCategory
entryRuleCategory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCategoryRule()); }
	iv_ruleCategory=ruleCategory
	{ $current=$iv_ruleCategory.current; }
	EOF;

// Rule Category
ruleCategory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='category: '
		{
			newLeafNode(otherlv_0, grammarAccess.getCategoryAccess().getCategoryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCategoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='description: '
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDescriptionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleMCS
entryRuleMCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMCSRule()); }
	iv_ruleMCS=ruleMCS
	{ $current=$iv_ruleMCS.current; }
	EOF;

// Rule MCS
ruleMCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='metadataCacheSize: '
		{
			newLeafNode(otherlv_0, grammarAccess.getMCSAccess().getMetadataCacheSizeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMCSAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCSRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type: '
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleHoldType
entryRuleHoldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHoldTypeRule()); }
	iv_ruleHoldType=ruleHoldType
	{ $current=$iv_ruleHoldType.current; }
	EOF;

// Rule HoldType
ruleHoldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='holdType:'
		{
			newLeafNode(otherlv_0, grammarAccess.getHoldTypeAccess().getHoldTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHoldTypeAccess().getFeaturesTypeParserRuleCall_1_0());
				}
				lv_features_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHoldTypeRule());
					}
					add(
						$current,
						"features",
						lv_features_1_0,
						"ru.spbstu.application.configurator.MyDsl.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID1 : '0'..'9' ('.'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
