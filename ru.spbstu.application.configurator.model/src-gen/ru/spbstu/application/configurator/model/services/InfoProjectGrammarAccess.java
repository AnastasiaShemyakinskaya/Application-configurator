/*
 * generated by Xtext 2.14.0
 */
package ru.spbstu.application.configurator.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class InfoProjectGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementVersionParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementApplicationParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTenantParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementHoldParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//Model:
		//	element+=Version element+=Application element+=Tenant element+=Hold;
		@Override public ParserRule getRule() { return rule; }
		
		//element+=Version element+=Application element+=Tenant element+=Hold
		public Group getGroup() { return cGroup; }
		
		//element+=Version
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//Version
		public RuleCall getElementVersionParserRuleCall_0_0() { return cElementVersionParserRuleCall_0_0; }
		
		//element+=Application
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Application
		public RuleCall getElementApplicationParserRuleCall_1_0() { return cElementApplicationParserRuleCall_1_0; }
		
		//element+=Tenant
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Tenant
		public RuleCall getElementTenantParserRuleCall_2_0() { return cElementTenantParserRuleCall_2_0; }
		
		//element+=Hold
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//Hold
		public RuleCall getElementHoldParserRuleCall_3_0() { return cElementHoldParserRuleCall_3_0; }
	}
	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVERSION_NUMBERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Version:
		//	'version:' name=VERSION_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//'version:' name=VERSION_NUMBER
		public Group getGroup() { return cGroup; }
		
		//'version:'
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }
		
		//name=VERSION_NUMBER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VERSION_NUMBER
		public RuleCall getNameVERSION_NUMBERTerminalRuleCall_1_0() { return cNameVERSION_NUMBERTerminalRuleCall_1_0; }
	}
	public class FeatureNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.FeatureName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FeatureName:
		//	'name: ' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'name: ' name=ID
		public Group getGroup() { return cGroup; }
		
		//'name: '
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatures1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatures1FeatureNameParserRuleCall_1_0 = (RuleCall)cFeatures1Assignment_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesArchiveTypeParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureCategoryParserRuleCall_3_0 = (RuleCall)cFeatureAssignment_3.eContents().get(0);
		private final Assignment cFeatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureDescriptionParserRuleCall_4_0 = (RuleCall)cFeatureAssignment_4.eContents().get(0);
		private final Assignment cFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeatureMCSParserRuleCall_5_0 = (RuleCall)cFeatureAssignment_5.eContents().get(0);
		private final Assignment cFeatureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeatureTypeParserRuleCall_6_0 = (RuleCall)cFeatureAssignment_6.eContents().get(0);
		
		//Application:
		//	'application:'
		//	features1+=FeatureName features+=ArchiveType feature+=Category feature+=Description?
		//	feature+=MCS feature+=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'application:' features1+=FeatureName features+=ArchiveType feature+=Category feature+=Description? feature+=MCS
		//feature+=Type
		public Group getGroup() { return cGroup; }
		
		//'application:'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//features1+=FeatureName
		public Assignment getFeatures1Assignment_1() { return cFeatures1Assignment_1; }
		
		//FeatureName
		public RuleCall getFeatures1FeatureNameParserRuleCall_1_0() { return cFeatures1FeatureNameParserRuleCall_1_0; }
		
		//features+=ArchiveType
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//ArchiveType
		public RuleCall getFeaturesArchiveTypeParserRuleCall_2_0() { return cFeaturesArchiveTypeParserRuleCall_2_0; }
		
		//feature+=Category
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//Category
		public RuleCall getFeatureCategoryParserRuleCall_3_0() { return cFeatureCategoryParserRuleCall_3_0; }
		
		//feature+=Description?
		public Assignment getFeatureAssignment_4() { return cFeatureAssignment_4; }
		
		//Description
		public RuleCall getFeatureDescriptionParserRuleCall_4_0() { return cFeatureDescriptionParserRuleCall_4_0; }
		
		//feature+=MCS
		public Assignment getFeatureAssignment_5() { return cFeatureAssignment_5; }
		
		//MCS
		public RuleCall getFeatureMCSParserRuleCall_5_0() { return cFeatureMCSParserRuleCall_5_0; }
		
		//feature+=Type
		public Assignment getFeatureAssignment_6() { return cFeatureAssignment_6; }
		
		//Type
		public RuleCall getFeatureTypeParserRuleCall_6_0() { return cFeatureTypeParserRuleCall_6_0; }
	}
	public class TenantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Tenant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTenantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatures1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatures1FeatureNameParserRuleCall_1_0 = (RuleCall)cFeatures1Assignment_1.eContents().get(0);
		
		//Tenant:
		//	'tenant:'
		//	features1+=FeatureName;
		@Override public ParserRule getRule() { return rule; }
		
		//'tenant:' features1+=FeatureName
		public Group getGroup() { return cGroup; }
		
		//'tenant:'
		public Keyword getTenantKeyword_0() { return cTenantKeyword_0; }
		
		//features1+=FeatureName
		public Assignment getFeatures1Assignment_1() { return cFeatures1Assignment_1; }
		
		//FeatureName
		public RuleCall getFeatures1FeatureNameParserRuleCall_1_0() { return cFeatures1FeatureNameParserRuleCall_1_0; }
	}
	public class HoldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Hold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHoldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatures1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatures1FeatureNameParserRuleCall_1_0 = (RuleCall)cFeatures1Assignment_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesHoldTypeParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		
		//Hold:
		//	'hold:'
		//	features1+=FeatureName features+=HoldType;
		@Override public ParserRule getRule() { return rule; }
		
		//'hold:' features1+=FeatureName features+=HoldType
		public Group getGroup() { return cGroup; }
		
		//'hold:'
		public Keyword getHoldKeyword_0() { return cHoldKeyword_0; }
		
		//features1+=FeatureName
		public Assignment getFeatures1Assignment_1() { return cFeatures1Assignment_1; }
		
		//FeatureName
		public RuleCall getFeatures1FeatureNameParserRuleCall_1_0() { return cFeatures1FeatureNameParserRuleCall_1_0; }
		
		//features+=HoldType
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//HoldType
		public RuleCall getFeaturesHoldTypeParserRuleCall_2_0() { return cFeaturesHoldTypeParserRuleCall_2_0; }
	}
	public class ArchiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.ArchiveType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchiveTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEnumOfArchiveTypeEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ArchiveType:
		//	'archiveType:' value=enumOfArchiveType;
		@Override public ParserRule getRule() { return rule; }
		
		//'archiveType:' value=enumOfArchiveType
		public Group getGroup() { return cGroup; }
		
		//'archiveType:'
		public Keyword getArchiveTypeKeyword_0() { return cArchiveTypeKeyword_0; }
		
		//value=enumOfArchiveType
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//enumOfArchiveType
		public RuleCall getValueEnumOfArchiveTypeEnumRuleCall_1_0() { return cValueEnumOfArchiveTypeEnumRuleCall_1_0; }
	}
	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Category:
		//	'category:' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'category:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'category:'
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Description:
		//	'description:' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'description:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'description:'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.MCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetadataCacheSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MCS:
		//	'metadataCacheSize:' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'metadataCacheSize:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'metadataCacheSize:'
		public Keyword getMetadataCacheSizeKeyword_0() { return cMetadataCacheSizeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEnumOfTypesEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Type:
		//	'type:' value=enumOfTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'type:' value=enumOfTypes
		public Group getGroup() { return cGroup; }
		
		//'type:'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//value=enumOfTypes
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//enumOfTypes
		public RuleCall getValueEnumOfTypesEnumRuleCall_1_0() { return cValueEnumOfTypesEnumRuleCall_1_0; }
	}
	public class HoldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.HoldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHoldTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesTypeParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		
		//HoldType:
		//	'holdType:'
		//	features+=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'holdType:' features+=Type
		public Group getGroup() { return cGroup; }
		
		//'holdType:'
		public Keyword getHoldTypeKeyword_0() { return cHoldTypeKeyword_0; }
		
		//features+=Type
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }
		
		//Type
		public RuleCall getFeaturesTypeParserRuleCall_1_0() { return cFeaturesTypeParserRuleCall_1_0; }
	}
	
	public class EnumOfArchiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.enumOfArchiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSIPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSIPSipKeyword_0_0 = (Keyword)cSIPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTABLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTABLETableKeyword_1_0 = (Keyword)cTABLEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum enumOfArchiveType:
		//	SIP='sip' | TABLE='table';
		public EnumRule getRule() { return rule; }
		
		//SIP='sip' | TABLE='table'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIP='sip'
		public EnumLiteralDeclaration getSIPEnumLiteralDeclaration_0() { return cSIPEnumLiteralDeclaration_0; }
		
		//'sip'
		public Keyword getSIPSipKeyword_0_0() { return cSIPSipKeyword_0_0; }
		
		//TABLE='table'
		public EnumLiteralDeclaration getTABLEEnumLiteralDeclaration_1() { return cTABLEEnumLiteralDeclaration_1; }
		
		//'table'
		public Keyword getTABLETableKeyword_1_0() { return cTABLETableKeyword_1_0; }
	}
	public class EnumOfTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.enumOfTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACTIVE_ARCHIVINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACTIVE_ARCHIVINGActiveArchivingKeyword_0_0 = (Keyword)cACTIVE_ARCHIVINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAPP_DECOMMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAPP_DECOMMAppDecommKeyword_1_0 = (Keyword)cAPP_DECOMMEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum enumOfTypes:
		//	ACTIVE_ARCHIVING='active archiving' | APP_DECOMM='app decomm';
		public EnumRule getRule() { return rule; }
		
		//ACTIVE_ARCHIVING='active archiving' | APP_DECOMM='app decomm'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ACTIVE_ARCHIVING='active archiving'
		public EnumLiteralDeclaration getACTIVE_ARCHIVINGEnumLiteralDeclaration_0() { return cACTIVE_ARCHIVINGEnumLiteralDeclaration_0; }
		
		//'active archiving'
		public Keyword getACTIVE_ARCHIVINGActiveArchivingKeyword_0_0() { return cACTIVE_ARCHIVINGActiveArchivingKeyword_0_0; }
		
		//APP_DECOMM='app decomm'
		public EnumLiteralDeclaration getAPP_DECOMMEnumLiteralDeclaration_1() { return cAPP_DECOMMEnumLiteralDeclaration_1; }
		
		//'app decomm'
		public Keyword getAPP_DECOMMAppDecommKeyword_1_0() { return cAPP_DECOMMAppDecommKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final TerminalRule tVERSION_NUMBER;
	private final VersionElements pVersion;
	private final FeatureNameElements pFeatureName;
	private final ApplicationElements pApplication;
	private final TenantElements pTenant;
	private final HoldElements pHold;
	private final EnumOfArchiveTypeElements eEnumOfArchiveType;
	private final ArchiveTypeElements pArchiveType;
	private final CategoryElements pCategory;
	private final DescriptionElements pDescription;
	private final MCSElements pMCS;
	private final EnumOfTypesElements eEnumOfTypes;
	private final TypeElements pType;
	private final HoldTypeElements pHoldType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public InfoProjectGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tVERSION_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.spbstu.application.configurator.model.InfoProject.VERSION_NUMBER");
		this.pVersion = new VersionElements();
		this.pFeatureName = new FeatureNameElements();
		this.pApplication = new ApplicationElements();
		this.pTenant = new TenantElements();
		this.pHold = new HoldElements();
		this.eEnumOfArchiveType = new EnumOfArchiveTypeElements();
		this.pArchiveType = new ArchiveTypeElements();
		this.pCategory = new CategoryElements();
		this.pDescription = new DescriptionElements();
		this.pMCS = new MCSElements();
		this.eEnumOfTypes = new EnumOfTypesElements();
		this.pType = new TypeElements();
		this.pHoldType = new HoldTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ru.spbstu.application.configurator.model.InfoProject".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	element+=Version element+=Application element+=Tenant element+=Hold;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal VERSION_NUMBER:
	//	'0'..'9' ('.' | '0'..'9')*;
	public TerminalRule getVERSION_NUMBERRule() {
		return tVERSION_NUMBER;
	}
	
	//Version:
	//	'version:' name=VERSION_NUMBER;
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//FeatureName:
	//	'name: ' name=ID;
	public FeatureNameElements getFeatureNameAccess() {
		return pFeatureName;
	}
	
	public ParserRule getFeatureNameRule() {
		return getFeatureNameAccess().getRule();
	}
	
	//Application:
	//	'application:'
	//	features1+=FeatureName features+=ArchiveType feature+=Category feature+=Description?
	//	feature+=MCS feature+=Type;
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Tenant:
	//	'tenant:'
	//	features1+=FeatureName;
	public TenantElements getTenantAccess() {
		return pTenant;
	}
	
	public ParserRule getTenantRule() {
		return getTenantAccess().getRule();
	}
	
	//Hold:
	//	'hold:'
	//	features1+=FeatureName features+=HoldType;
	public HoldElements getHoldAccess() {
		return pHold;
	}
	
	public ParserRule getHoldRule() {
		return getHoldAccess().getRule();
	}
	
	//enum enumOfArchiveType:
	//	SIP='sip' | TABLE='table';
	public EnumOfArchiveTypeElements getEnumOfArchiveTypeAccess() {
		return eEnumOfArchiveType;
	}
	
	public EnumRule getEnumOfArchiveTypeRule() {
		return getEnumOfArchiveTypeAccess().getRule();
	}
	
	//ArchiveType:
	//	'archiveType:' value=enumOfArchiveType;
	public ArchiveTypeElements getArchiveTypeAccess() {
		return pArchiveType;
	}
	
	public ParserRule getArchiveTypeRule() {
		return getArchiveTypeAccess().getRule();
	}
	
	//Category:
	//	'category:' name=ID;
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}
	
	//Description:
	//	'description:' name=ID;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//MCS:
	//	'metadataCacheSize:' name=ID;
	public MCSElements getMCSAccess() {
		return pMCS;
	}
	
	public ParserRule getMCSRule() {
		return getMCSAccess().getRule();
	}
	
	//enum enumOfTypes:
	//	ACTIVE_ARCHIVING='active archiving' | APP_DECOMM='app decomm';
	public EnumOfTypesElements getEnumOfTypesAccess() {
		return eEnumOfTypes;
	}
	
	public EnumRule getEnumOfTypesRule() {
		return getEnumOfTypesAccess().getRule();
	}
	
	//Type:
	//	'type:' value=enumOfTypes;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//HoldType:
	//	'holdType:'
	//	features+=Type;
	public HoldTypeElements getHoldTypeAccess() {
		return pHoldType;
	}
	
	public ParserRule getHoldTypeRule() {
		return getHoldTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
