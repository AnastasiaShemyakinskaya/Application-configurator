/*
 * generated by Xtext 2.14.0
 */
package ru.spbstu.application.configurator.model.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import ru.spbstu.application.configurator.model.infoProject.Application;
import ru.spbstu.application.configurator.model.infoProject.ArchiveType;
import ru.spbstu.application.configurator.model.infoProject.Category;
import ru.spbstu.application.configurator.model.infoProject.Description;
import ru.spbstu.application.configurator.model.infoProject.FeatureName;
import ru.spbstu.application.configurator.model.infoProject.Hold;
import ru.spbstu.application.configurator.model.infoProject.HoldType;
import ru.spbstu.application.configurator.model.infoProject.InfoProjectPackage;
import ru.spbstu.application.configurator.model.infoProject.MCS;
import ru.spbstu.application.configurator.model.infoProject.Model;
import ru.spbstu.application.configurator.model.infoProject.Tenant;
import ru.spbstu.application.configurator.model.infoProject.Type;
import ru.spbstu.application.configurator.model.infoProject.Version;
import ru.spbstu.application.configurator.model.services.InfoProjectGrammarAccess;

@SuppressWarnings("all")
public class InfoProjectSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private InfoProjectGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == InfoProjectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case InfoProjectPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case InfoProjectPackage.ARCHIVE_TYPE:
				sequence_ArchiveType(context, (ArchiveType) semanticObject); 
				return; 
			case InfoProjectPackage.CATEGORY:
				sequence_Category(context, (Category) semanticObject); 
				return; 
			case InfoProjectPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case InfoProjectPackage.FEATURE_NAME:
				sequence_FeatureName(context, (FeatureName) semanticObject); 
				return; 
			case InfoProjectPackage.HOLD:
				sequence_Hold(context, (Hold) semanticObject); 
				return; 
			case InfoProjectPackage.HOLD_TYPE:
				sequence_HoldType(context, (HoldType) semanticObject); 
				return; 
			case InfoProjectPackage.MCS:
				sequence_MCS(context, (MCS) semanticObject); 
				return; 
			case InfoProjectPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case InfoProjectPackage.TENANT:
				sequence_Tenant(context, (Tenant) semanticObject); 
				return; 
			case InfoProjectPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case InfoProjectPackage.VERSION:
				sequence_Version(context, (Version) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Application returns Application
	 *
	 * Constraint:
	 *     (
	 *         features1+=FeatureName 
	 *         features+=ArchiveType 
	 *         feature+=Category 
	 *         feature+=Description? 
	 *         feature+=MCS 
	 *         feature+=Type
	 *     )
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchiveType returns ArchiveType
	 *
	 * Constraint:
	 *     value=enumOfArchiveType
	 */
	protected void sequence_ArchiveType(ISerializationContext context, ArchiveType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfoProjectPackage.Literals.ARCHIVE_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfoProjectPackage.Literals.ARCHIVE_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArchiveTypeAccess().getValueEnumOfArchiveTypeEnumRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Category returns Category
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Category(ISerializationContext context, Category semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfoProjectPackage.Literals.CATEGORY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfoProjectPackage.Literals.CATEGORY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfoProjectPackage.Literals.DESCRIPTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfoProjectPackage.Literals.DESCRIPTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureName returns FeatureName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FeatureName(ISerializationContext context, FeatureName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfoProjectPackage.Literals.FEATURE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfoProjectPackage.Literals.FEATURE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureNameAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HoldType returns HoldType
	 *
	 * Constraint:
	 *     features+=Type
	 */
	protected void sequence_HoldType(ISerializationContext context, HoldType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Hold returns Hold
	 *
	 * Constraint:
	 *     (features1+=FeatureName features+=HoldType)
	 */
	protected void sequence_Hold(ISerializationContext context, Hold semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCS returns MCS
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MCS(ISerializationContext context, MCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfoProjectPackage.Literals.MCS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfoProjectPackage.Literals.MCS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMCSAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (element+=Version element+=Application element+=Tenant element+=Hold)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tenant returns Tenant
	 *
	 * Constraint:
	 *     features1+=FeatureName
	 */
	protected void sequence_Tenant(ISerializationContext context, Tenant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     value=enumOfTypes
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfoProjectPackage.Literals.TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfoProjectPackage.Literals.TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getValueEnumOfTypesEnumRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Version returns Version
	 *
	 * Constraint:
	 *     name=VERSION_NUMBER
	 */
	protected void sequence_Version(ISerializationContext context, Version semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfoProjectPackage.Literals.VERSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfoProjectPackage.Literals.VERSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVersionAccess().getNameVERSION_NUMBERTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
