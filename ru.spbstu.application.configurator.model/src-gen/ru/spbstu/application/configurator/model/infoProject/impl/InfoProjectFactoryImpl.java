/**
 * generated by Xtext 2.14.0
 */
package ru.spbstu.application.configurator.model.infoProject.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import ru.spbstu.application.configurator.model.infoProject.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class InfoProjectFactoryImpl extends EFactoryImpl implements InfoProjectFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static InfoProjectFactory init()
  {
    try
    {
      InfoProjectFactory theInfoProjectFactory = (InfoProjectFactory)EPackage.Registry.INSTANCE.getEFactory(InfoProjectPackage.eNS_URI);
      if (theInfoProjectFactory != null)
      {
        return theInfoProjectFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new InfoProjectFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfoProjectFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case InfoProjectPackage.MODEL: return createModel();
      case InfoProjectPackage.VERSION: return createVersion();
      case InfoProjectPackage.NAMESPACE: return createNamespace();
      case InfoProjectPackage.PREFIX: return createPrefix();
      case InfoProjectPackage.URI: return createUri();
      case InfoProjectPackage.FEATURE_NAME: return createFeatureName();
      case InfoProjectPackage.APPLICATION: return createApplication();
      case InfoProjectPackage.TENANT: return createTenant();
      case InfoProjectPackage.HOLD: return createHold();
      case InfoProjectPackage.ARCHIVE_TYPE: return createArchiveType();
      case InfoProjectPackage.CATEGORY: return createCategory();
      case InfoProjectPackage.DESCRIPTION: return createDescription();
      case InfoProjectPackage.MCS: return createMCS();
      case InfoProjectPackage.TYPE: return createType();
      case InfoProjectPackage.HOLD_TYPE: return createHoldType();
      case InfoProjectPackage.TYPE_ATTRIBUTE: return createTypeAttribute();
      case InfoProjectPackage.INCLUDE: return createInclude();
      case InfoProjectPackage.INGEST_NODE: return createIngestNode();
      case InfoProjectPackage.ENUM_COD: return createEnumCOD();
      case InfoProjectPackage.ENUM_MR: return createEnumMR();
      case InfoProjectPackage.LOG_LEVEL: return createLogLevel();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case InfoProjectPackage.ENUM_OF_ARCHIVE_TYPE:
        return createenumOfArchiveTypeFromString(eDataType, initialValue);
      case InfoProjectPackage.ENUM_OF_TYPES:
        return createenumOfTypesFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case InfoProjectPackage.ENUM_OF_ARCHIVE_TYPE:
        return convertenumOfArchiveTypeToString(eDataType, instanceValue);
      case InfoProjectPackage.ENUM_OF_TYPES:
        return convertenumOfTypesToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Version createVersion()
  {
    VersionImpl version = new VersionImpl();
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Namespace createNamespace()
  {
    NamespaceImpl namespace = new NamespaceImpl();
    return namespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Prefix createPrefix()
  {
    PrefixImpl prefix = new PrefixImpl();
    return prefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Uri createUri()
  {
    UriImpl uri = new UriImpl();
    return uri;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureName createFeatureName()
  {
    FeatureNameImpl featureName = new FeatureNameImpl();
    return featureName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Application createApplication()
  {
    ApplicationImpl application = new ApplicationImpl();
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tenant createTenant()
  {
    TenantImpl tenant = new TenantImpl();
    return tenant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Hold createHold()
  {
    HoldImpl hold = new HoldImpl();
    return hold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArchiveType createArchiveType()
  {
    ArchiveTypeImpl archiveType = new ArchiveTypeImpl();
    return archiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Category createCategory()
  {
    CategoryImpl category = new CategoryImpl();
    return category;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Description createDescription()
  {
    DescriptionImpl description = new DescriptionImpl();
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MCS createMCS()
  {
    MCSImpl mcs = new MCSImpl();
    return mcs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HoldType createHoldType()
  {
    HoldTypeImpl holdType = new HoldTypeImpl();
    return holdType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeAttribute createTypeAttribute()
  {
    TypeAttributeImpl typeAttribute = new TypeAttributeImpl();
    return typeAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IngestNode createIngestNode()
  {
    IngestNodeImpl ingestNode = new IngestNodeImpl();
    return ingestNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumCOD createEnumCOD()
  {
    EnumCODImpl enumCOD = new EnumCODImpl();
    return enumCOD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumMR createEnumMR()
  {
    EnumMRImpl enumMR = new EnumMRImpl();
    return enumMR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogLevel createLogLevel()
  {
    LogLevelImpl logLevel = new LogLevelImpl();
    return logLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public enumOfArchiveType createenumOfArchiveTypeFromString(EDataType eDataType, String initialValue)
  {
    enumOfArchiveType result = enumOfArchiveType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertenumOfArchiveTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public enumOfTypes createenumOfTypesFromString(EDataType eDataType, String initialValue)
  {
    enumOfTypes result = enumOfTypes.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertenumOfTypesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfoProjectPackage getInfoProjectPackage()
  {
    return (InfoProjectPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static InfoProjectPackage getPackage()
  {
    return InfoProjectPackage.eINSTANCE;
  }

} //InfoProjectFactoryImpl
